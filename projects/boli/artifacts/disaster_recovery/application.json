{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "create_bond(string,string,string,string,uint64,uint64,uint64,uint64,string,string,string,string,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "invest_in_bond(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_trigger_event(uint64,string,uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_bond_payout(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_bond_maturity(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_bond_status(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_bond_value(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 10,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asset_creator": {
                    "type": "bytes",
                    "key": "asset_creator",
                    "descr": "Address of the asset creator"
                },
                "asset_id": {
                    "type": "uint64",
                    "key": "asset_id",
                    "descr": "Asset ID of the tokenized asset"
                },
                "asset_type": {
                    "type": "bytes",
                    "key": "asset_type",
                    "descr": "Type of the asset (e.g., 'blue-economy', 'carbon-credit', etc.)"
                },
                "bond_name": {
                    "type": "bytes",
                    "key": "bond_name",
                    "descr": "Name of the bond"
                },
                "bond_type": {
                    "type": "bytes",
                    "key": "bond_type",
                    "descr": "Type of disaster recovery bond"
                },
                "bondholders_count": {
                    "type": "uint64",
                    "key": "bondholders_count",
                    "descr": "Number of bondholders"
                },
                "compliance_status": {
                    "type": "bytes",
                    "key": "compliance_status",
                    "descr": "Compliance status of the asset (e.g., 'authorized', 'suspended')"
                },
                "coverage_amount": {
                    "type": "uint64",
                    "key": "coverage_amount",
                    "descr": "Amount to be paid out when triggered"
                },
                "geolocation": {
                    "type": "bytes",
                    "key": "geolocation",
                    "descr": "Geolocation information for the asset"
                },
                "interest_rate": {
                    "type": "uint64",
                    "key": "interest_rate",
                    "descr": "Interest rate in basis points (1/100 of a percent)"
                },
                "is_triggered": {
                    "type": "uint64",
                    "key": "is_triggered",
                    "descr": "Whether the bond has been triggered"
                },
                "issue_date": {
                    "type": "uint64",
                    "key": "issue_date",
                    "descr": "Issuance date of the bond"
                },
                "jurisdiction_code": {
                    "type": "bytes",
                    "key": "jurisdiction_code",
                    "descr": "Jurisdiction code where the asset is located/regulated"
                },
                "last_updated": {
                    "type": "uint64",
                    "key": "last_updated",
                    "descr": "Timestamp of the last update to the asset"
                },
                "maturity_date": {
                    "type": "uint64",
                    "key": "maturity_date",
                    "descr": "Maturity date of the bond"
                },
                "metadata": {
                    "type": "bytes",
                    "key": "metadata",
                    "descr": "IPFS hash or other metadata reference"
                },
                "oracle_provider": {
                    "type": "bytes",
                    "key": "oracle_provider",
                    "descr": "Provider of the oracle data"
                },
                "total_bond_value": {
                    "type": "uint64",
                    "key": "total_bond_value",
                    "descr": "Total value of the bond"
                },
                "trigger_threshold": {
                    "type": "uint64",
                    "key": "trigger_threshold",
                    "descr": "Threshold value that triggers the bond payout"
                },
                "trigger_type": {
                    "type": "bytes",
                    "key": "trigger_type",
                    "descr": "Type of trigger event (e.g., hurricane, flood)"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DisasterRecoveryBondContract",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the app - basic setup only"
            },
            {
                "name": "create_bond",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "unit_name"
                    },
                    {
                        "type": "string",
                        "name": "bond_type"
                    },
                    {
                        "type": "string",
                        "name": "trigger_type"
                    },
                    {
                        "type": "uint64",
                        "name": "trigger_threshold"
                    },
                    {
                        "type": "uint64",
                        "name": "coverage_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "maturity_date"
                    },
                    {
                        "type": "uint64",
                        "name": "interest_rate"
                    },
                    {
                        "type": "string",
                        "name": "jurisdiction_code"
                    },
                    {
                        "type": "string",
                        "name": "geolocation"
                    },
                    {
                        "type": "string",
                        "name": "oracle_provider"
                    },
                    {
                        "type": "string",
                        "name": "bond_document_hash"
                    },
                    {
                        "type": "uint64",
                        "name": "total_bond_value"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates a new disaster recovery bond"
            },
            {
                "name": "invest_in_bond",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "investment_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Invest in a bond"
            },
            {
                "name": "process_trigger_event",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "string",
                        "name": "oracle_data_hash"
                    },
                    {
                        "type": "uint64",
                        "name": "oracle_value"
                    },
                    {
                        "type": "uint64",
                        "name": "oracle_timestamp"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Process oracle data to determine if bond trigger conditions are met"
            },
            {
                "name": "process_bond_payout",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "address",
                        "name": "beneficiary"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Process payout for a triggered bond"
            },
            {
                "name": "process_bond_maturity",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Process bond maturity payment"
            },
            {
                "name": "get_bond_status",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Get bond status information"
            },
            {
                "name": "claim_bond_value",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Allow bondholder to claim matured bond value with interest"
            }
        ],
        "networks": {},
        "desc": "Implements climate event-triggered financing instruments for vulnerable regions"
    },
    "bare_call_config": {}
}