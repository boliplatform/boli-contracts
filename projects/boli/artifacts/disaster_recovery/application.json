{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "configure_boli_integration(uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_bond(string,string,string,string,uint64,uint64,uint64,uint64,string,string,string,string,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_funding_status(string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "report_bond_interest(uint64,uint64,string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "invest_in_bond(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_trigger_event(uint64,string,uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_bond_payout(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "process_bond_maturity(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_bond_status(uint64)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim_bond_value(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 11,
            "num_uints": 14
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asset_creator": {
                    "type": "bytes",
                    "key": "asset_creator",
                    "descr": "Address of the asset creator"
                },
                "asset_id": {
                    "type": "uint64",
                    "key": "asset_id",
                    "descr": "Asset ID of the tokenized asset"
                },
                "asset_registry_id": {
                    "type": "uint64",
                    "key": "asset_registry_id",
                    "descr": "App ID of the Asset Registry managing this asset"
                },
                "asset_type": {
                    "type": "bytes",
                    "key": "asset_type",
                    "descr": "Type of the asset (e.g., 'blue-economy', 'carbon-credit', etc.)"
                },
                "boli_allocation": {
                    "type": "uint64",
                    "key": "boli_allocation",
                    "descr": "Amount of BOLI tokens allocated to this asset"
                },
                "bond_name": {
                    "type": "bytes",
                    "key": "bond_name",
                    "descr": "Name of the bond"
                },
                "bond_type": {
                    "type": "bytes",
                    "key": "bond_type",
                    "descr": "Type of disaster recovery bond"
                },
                "bondholders_count": {
                    "type": "uint64",
                    "key": "bondholders_count",
                    "descr": "Number of bondholders"
                },
                "compliance_status": {
                    "type": "bytes",
                    "key": "compliance_status",
                    "descr": "Compliance status of the asset (e.g., 'authorized', 'suspended')"
                },
                "coverage_amount": {
                    "type": "uint64",
                    "key": "coverage_amount",
                    "descr": "Amount to be paid out when triggered"
                },
                "current_funding": {
                    "type": "uint64",
                    "key": "current_funding",
                    "descr": "Current amount of BOLI tokens funded"
                },
                "geolocation": {
                    "type": "bytes",
                    "key": "geolocation",
                    "descr": "Geolocation information for the asset"
                },
                "interest_rate": {
                    "type": "uint64",
                    "key": "interest_rate",
                    "descr": "Interest rate in basis points (1/100 of a percent)"
                },
                "investment_status": {
                    "type": "bytes",
                    "key": "investment_status",
                    "descr": "Investment status (registered, funding, funded, active, completed)"
                },
                "is_triggered": {
                    "type": "uint64",
                    "key": "is_triggered",
                    "descr": "Whether the bond has been triggered"
                },
                "issue_date": {
                    "type": "uint64",
                    "key": "issue_date",
                    "descr": "Issuance date of the bond"
                },
                "jurisdiction_code": {
                    "type": "bytes",
                    "key": "jurisdiction_code",
                    "descr": "Jurisdiction code where the asset is located/regulated"
                },
                "last_updated": {
                    "type": "uint64",
                    "key": "last_updated",
                    "descr": "Timestamp of the last update to the asset"
                },
                "maturity_date": {
                    "type": "uint64",
                    "key": "maturity_date",
                    "descr": "Maturity date of the bond"
                },
                "metadata": {
                    "type": "bytes",
                    "key": "metadata",
                    "descr": "IPFS hash or other metadata reference"
                },
                "oracle_provider": {
                    "type": "bytes",
                    "key": "oracle_provider",
                    "descr": "Provider of the oracle data"
                },
                "total_bond_value": {
                    "type": "uint64",
                    "key": "total_bond_value",
                    "descr": "Total value of the bond"
                },
                "treasury_app_id": {
                    "type": "uint64",
                    "key": "treasury_app_id",
                    "descr": "App ID of the Treasury managing the backing"
                },
                "trigger_threshold": {
                    "type": "uint64",
                    "key": "trigger_threshold",
                    "descr": "Threshold value that triggers the bond payout"
                },
                "trigger_type": {
                    "type": "bytes",
                    "key": "trigger_type",
                    "descr": "Type of trigger event (e.g., hurricane, flood)"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DisasterRecoveryBondContract",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the app - basic setup only"
            },
            {
                "name": "configure_boli_integration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "asset_registry_id"
                    },
                    {
                        "type": "uint64",
                        "name": "treasury_app_id"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Configure the contract with BOLI integration"
            },
            {
                "name": "create_bond",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "unit_name"
                    },
                    {
                        "type": "string",
                        "name": "bond_type"
                    },
                    {
                        "type": "string",
                        "name": "trigger_type"
                    },
                    {
                        "type": "uint64",
                        "name": "trigger_threshold"
                    },
                    {
                        "type": "uint64",
                        "name": "coverage_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "maturity_date"
                    },
                    {
                        "type": "uint64",
                        "name": "interest_rate"
                    },
                    {
                        "type": "string",
                        "name": "jurisdiction_code"
                    },
                    {
                        "type": "string",
                        "name": "geolocation"
                    },
                    {
                        "type": "string",
                        "name": "oracle_provider"
                    },
                    {
                        "type": "string",
                        "name": "bond_document_hash"
                    },
                    {
                        "type": "uint64",
                        "name": "total_bond_value"
                    },
                    {
                        "type": "uint64",
                        "name": "boli_allocation"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates a new disaster recovery bond with BOLI allocation"
            },
            {
                "name": "update_funding_status",
                "args": [
                    {
                        "type": "string",
                        "name": "new_status"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Updates the bond funding status"
            },
            {
                "name": "report_bond_interest",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "interest_amount"
                    },
                    {
                        "type": "string",
                        "name": "interest_period"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Reports bond interest for distribution to bondholders"
            },
            {
                "name": "invest_in_bond",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "investment_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Invest in a bond"
            },
            {
                "name": "process_trigger_event",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "string",
                        "name": "oracle_data_hash"
                    },
                    {
                        "type": "uint64",
                        "name": "oracle_value"
                    },
                    {
                        "type": "uint64",
                        "name": "oracle_timestamp"
                    }
                ],
                "returns": {
                    "type": "bool"
                },
                "desc": "Process oracle data to determine if bond trigger conditions are met"
            },
            {
                "name": "process_bond_payout",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    },
                    {
                        "type": "address",
                        "name": "beneficiary"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Process payout for a triggered bond"
            },
            {
                "name": "process_bond_maturity",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Process bond maturity payment"
            },
            {
                "name": "get_bond_status",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Get bond status information"
            },
            {
                "name": "claim_bond_value",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bond_asset_id"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Allow bondholder to claim matured bond value with interest"
            }
        ],
        "networks": {},
        "desc": "Implements climate event-triggered financing instruments for vulnerable regions"
    },
    "bare_call_config": {}
}