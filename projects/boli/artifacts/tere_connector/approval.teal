#pragma version 8
intcblock 0 1
bytecblock 0x 0x65786563 0x151f7c75 0x6578656375746f72 0x726573756c74 0x00 0x61646d696e5f61646472657373 0x74727565
txna ApplicationArgs 0
pushbytes 0x4c5c61ba // "create()void"
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x284514bb // "add_trusted_executor(address)bool"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x01c30d32 // "register_execution(string,string,string)bool"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x3cee55ac // "submit_execution_result(string,string)bool"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x7c631b4e // "get_execution_result(string)string"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x8ef05a4e // "verify_execution(string,string)bool"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub verifyexecutioncaster_11
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getexecutionresultcaster_10
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub submitexecutionresultcaster_9
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub registerexecutioncaster_8
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub addtrustedexecutorcaster_7
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
callsub createcaster_6
intc_1 // 1
return

// create
create_0:
proto 0 0
bytec 6 // "admin_address"
global CreatorAddress
app_global_put
intc_1 // 1
return

// add_trusted_executor
addtrustedexecutor_1:
proto 1 1
intc_0 // 0
txn Sender
bytec 6 // "admin_address"
app_global_get
==
// Only admin can add executors
assert
bytec_3 // "executor"
frame_dig -1
concat
box_del
pop
bytec_3 // "executor"
frame_dig -1
concat
bytec 7 // "true"
box_put
intc_1 // 1
!
!
frame_bury 0
retsub

// register_execution
registerexecution_2:
proto 3 1
intc_0 // 0
bytec_1 // "exec"
frame_dig -3
concat
box_del
pop
bytec_1 // "exec"
frame_dig -3
concat
frame_dig -2
extract 2 0
pushbytes 0x3a // ":"
concat
frame_dig -1
extract 2 0
concat
box_put
intc_1 // 1
!
!
frame_bury 0
retsub

// submit_execution_result
submitexecutionresult_3:
proto 2 1
intc_0 // 0
bytec_1 // "exec"
frame_dig -2
concat
box_len
store 1
store 0
load 1
// Execution not registered
assert
bytec_3 // "executor"
txn Sender
concat
box_len
store 3
store 2
load 3
bytec_3 // "executor"
txn Sender
concat
box_get
store 5
store 4
load 5
assert
load 4
bytec 7 // "true"
==
&&
// Not a trusted executor
assert
bytec 4 // "result"
frame_dig -2
concat
box_del
pop
bytec 4 // "result"
frame_dig -2
concat
frame_dig -1
extract 2 0
box_put
intc_1 // 1
!
!
frame_bury 0
retsub

// get_execution_result
getexecutionresult_4:
proto 1 1
bytec_0 // ""
bytec 4 // "result"
frame_dig -1
concat
box_len
store 7
store 6
load 7
// No result for this execution
assert
bytec 4 // "result"
frame_dig -1
concat
box_get
store 9
store 8
load 9
assert
load 8
frame_bury 0
frame_dig 0
len
itob
extract 6 0
frame_dig 0
concat
frame_bury 0
retsub

// verify_execution
verifyexecution_5:
proto 2 1
intc_0 // 0
bytec_1 // "exec"
frame_dig -2
concat
box_len
store 11
store 10
load 11
// Execution not registered
assert
bytec_1 // "exec"
frame_dig -2
concat
box_get
store 13
store 12
load 13
assert
load 12
intc_0 // 0
frame_dig -1
extract 2 0
len
substring3
frame_dig -1
extract 2 0
==
!
!
frame_bury 0
retsub

// create_caster
createcaster_6:
proto 0 0
callsub create_0
retsub

// add_trusted_executor_caster
addtrustedexecutorcaster_7:
proto 0 0
intc_0 // 0
bytec_0 // ""
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub addtrustedexecutor_1
frame_bury 0
bytec_2 // 0x151f7c75
bytec 5 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub

// register_execution_caster
registerexecutioncaster_8:
proto 0 0
intc_0 // 0
bytec_0 // ""
dupn 2
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
frame_bury 2
txna ApplicationArgs 3
frame_bury 3
frame_dig 1
frame_dig 2
frame_dig 3
callsub registerexecution_2
frame_bury 0
bytec_2 // 0x151f7c75
bytec 5 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub

// submit_execution_result_caster
submitexecutionresultcaster_9:
proto 0 0
intc_0 // 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
frame_bury 2
frame_dig 1
frame_dig 2
callsub submitexecutionresult_3
frame_bury 0
bytec_2 // 0x151f7c75
bytec 5 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub

// get_execution_result_caster
getexecutionresultcaster_10:
proto 0 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
frame_dig 1
callsub getexecutionresult_4
frame_bury 0
bytec_2 // 0x151f7c75
frame_dig 0
concat
log
retsub

// verify_execution_caster
verifyexecutioncaster_11:
proto 0 0
intc_0 // 0
bytec_0 // ""
dup
txna ApplicationArgs 1
frame_bury 1
txna ApplicationArgs 2
frame_bury 2
frame_dig 1
frame_dig 2
callsub verifyexecution_5
frame_bury 0
bytec_2 // 0x151f7c75
bytec 5 // 0x00
intc_0 // 0
frame_dig 0
setbit
concat
log
retsub